#ifndef S21_3DVIEWER_H_B
#define S21_3DVIEWER_H_B
/*! \mainpage Главная страница документации проекта 3DViewer
 *
 * \section project_sec Задание
 *
 * Разработать программу для визуализации каркасной модели в трехмерном
 * пространстве,<br> позволяющую производить аффинные преобразования и
 * соответствующую ряду критериев.
 *
 * \subsection devs_sec Разработчики
 *
 * steffani: реализация преобразований, документация, тестирование.<br>
 * timberly: фронтэнд.
 *
 * \subsection Примечание
 * Иконки взяты с сайта www.flaticon.com
 */

/*!
\file
\brief Заголовочный файл с описанием функций.

Данный файл содержит в себе определения
функций, используемых в проекте s21_3DViewer.
*/

#ifdef __cplusplus
extern "C" {
#endif

#include <ctype.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SUCCESS 0  ///< код успешного завершения работы функции
#define FAILURE 1  ///< код завершения работы функции c ошибкой
#define WRONG_TYPE \
  2  ///< код завершения работы функции парсера с неверным типом
#define MAX_LEN 1024;  ///< максимальная длина строки obj-файла
#define PI 3.14159265358979323846  ///< число пи

/// @brief Структура, задающая точку (вершину) модели по координатам
typedef struct vertex {
  double x;  ///< координата точки по оси X
  double y;  ///< координата точки по оси Y
  double z;  ///< координата точки по оси Z
} vertex;

/// @brief Структура, задающая массив точек (вершин)
typedef struct vertexes {
  vertex *vert;  ///< указатель на массив точек,задаваемый структурой point
  int p_amount;  ///< количество точек в массиве
} vertexes;

/// @brief Структура, задающая величину преобразваний по 3 координатным осям
typedef struct axis_values {
  double x_axis;  ///< величина по оси X
  double y_axis;  ///< величина по оси Y
  double z_axis;  ///< величина по оси Z
} axis_values;

/// @brief Структура, задающая тип требуемого преобразования: перемещение,
/// вращение или трансформация
typedef enum transformation {
  translation,  ///< перемещение
  rotation,     ///< вращение
  scaling,      ///< масштабирование
} transformation_t;

/// @brief Структура, задающая поверхность (полигон) по точкам
typedef struct polygon {
  int amount_points;  ///< число точек в полигоне
  int *points;        ///< номера точек
} polygon;

/// @brief Структура, задающая массив поверхностей (полигонов) по точкам
typedef struct polygons {
  int amount_poly;   ///< число полигонов в модели
  int amount_edges;  ///< число граней в модели
  polygon *polygon;  ///< полигон
} polygons;

/*!
Основная функция, реализующая парсинг obj-файла и обработку данных для
визуализации. Вначале, открыв файл, считает количество вершин и полигонов,
затем, начав проход по файлу сначала заполняет структуры массивов полигонов и
вершин. После чего производится центрирование модели и ее первоначальное
масштабирование. Возвращает результат: 0 - успешное завершение, 1 - неудачное.
\param *filename строка с названием файла
\param *vertex_arr указатель на заполняемый массив вершин
\param *polygon_arr указатель на заполняемый массив полигонов
*/
int obj_file_full(char *filename, vertexes *vertex_arr, polygons *polygon_arr);

/*!
Функция, реализующая парсинг obj-файла. Вначале, открыв файл, считает
количество вершин и полигонов, затем, начав проход по файлу сначала заполняет
структуры массивов полигонов и вершин. Возвращает результат: 0 - успешное
завершение, 1 - неудачное.
\param *filename строка с названием файла
\param *vertex_arr указатель на заполняемый массив вершин
\param *polygon_arr указатель на заполняемый массив полигонов
*/
int obj_file_parser(char *filename, vertexes *vertex_arr,
                    polygons *polygon_arr);

/*!
Функция, реализующая счетчик вершин и поверхностей модели
Возвращает результат: 0 - успешное завершение, 1 - неудачное.
\param *file_3d указатель на открываемый файл
\param *result_points указатель на количество вершин
\param *result_surfaces указатель на количество поверхностей
*/
void obj_points_surfaces_counter(FILE *file_3d, int *result_points,
                                 int *result_surfaces);

/*!
Функция, реализующая парсинг obj-файла по вершинам. Заполняет массив вершин
значениями. Возвращает результат: 0 - успешное завершение, 1 - неудачное. \param
*readed_string считанная строка \param *point указатель структуру вершины -
элемент формируемого массива вершин
*/
int point_parser(char *readed_string, vertex *point);

/*!
Функция, реализующая парсинг obj-файла по полигонам. Заполняет массив полигонов
значениями. Возвращает результат: 0 - успешное завершение, 1 - неудачное. \param
*readed_string считанная строка \param *poly указатель структуру полигона -
элемент формируемого массива полигонов \param *amount_edges указатель на число
граней модели
*/
int surface_parser(char *readed_string, polygon *poly, int *amount_edges);

/*!
Функция, которая выводит на экран значения массивов вершин и полигонов в удобной
для восприятия форме. \param *arr_v указатель на массив вершин \param *arr_p
указатель на массив полигонов
*/
void print_points_polygons(vertexes *arr_v, polygons *arr_p);

/*!
Функция, которая выделяет память под число вершин и полигонов.
\param amount_v число вершин
\param *result_v указатель на выделенную под массив вершин область памяти
\param amount_p число полигонов
\param *result_p указатель на выделенную под массив полигонов область памяти
*/
int create_vertex_polygon(int amount_v, vertexes *result_v, int amount_p,
                          polygons *result_p);

/*!
Функция, заполняющая элемент массива полигонов.
\param *tmp_str временная строка, содержащая номера точек
\param *p_arr указатель на массив точек полигона
*/
void forming_polygon(char *tmp_str, int *p_arr);

/*!
Функция, которая выделяет память под число вершин и полигонов.
Возвращает число точек в полигоне.
\param *read_str считанная из obj-файла строка
\param *tmp_str временная строка, содержащая номера точек
\param len длина считанной строки
*/
int push_to_tmp_str(char *read_str, char *tmp_str, int len);

/*!
Функция, заполняющая все символы строки до j-го символа на нулевой символ.
\param *str указатель на строку
\param j индекс символа до которого производится замена
*/
void strclean(char *str, int j);

/*!
Функция, которая обрабатывает полученные массивы вершин для центрирования и
масштабирования, необходимых для визуализации. \param *arr_v указатель на массив
вершин \param *max_xyz условная вершина из максимальных значений координат XYZ в
obj-файле \param *min_xyz условная вершина из минимальных значений координат XYZ
в obj-файле \param value_scale первоначальный масштаб при открытии модели
*/
void rescaling_and_centering(vertexes *arr_v, vertex max_xyz, vertex min_xyz,
                             double value_scale);

/*!
Функция, которая максимальные и минимальные значения координат по осяям XYZ в
массиве вершин. \param *arr_v указатель на массив вершин \param *max_xyz
условная вершина из максимальных значений координат XYZ в obj-файле \param
*min_xyz условная вершина из минимальных значений координат XYZ в obj-файле
*/
void max_min_vertex(vertexes *arr_v, vertex *max_xyz, vertex *min_xyz);

/*!
Функция, реализующая различные аффнитивные преобразования obj-файла.
Построчно считывая координаты точек из файла, проводит требуемое преобразование
и записывает координаты точек обратно в файл. Возвращает результат: 0 - успешное
завершение, 1 - неудачное. \param *v_arr массив вершин, считанных из файла
\param type тип требуемого преобразования: перемещение, вращение или
трансформация \param *values структура, задающая значения преобразваний по 3
координатным осям
*/
void transformation(vertexes *v_arr, transformation_t type,
                    axis_values *values);

/*!
Функция, реализующая пересчет координат точек для реализации перемещения по
определенной оси. \param *point координаты точки
\param *trans_values указатель на количество вершин
*/
void matrix_translation(vertex *point, axis_values *trans_values);

/*!
Функция, реализующая пересчет координат точек для реализации вращения
относительно определенной оси. \param *point координаты точки \param *rot_values
указатель на количество вершин
*/
void matrix_rotation(vertex *point, axis_values *rot_values);

/*!
Функция, реализующая пересчет координат точек для реализации масштабирования
относительно определенной оси. \param *point координаты точки \param
*scale_values указатель на количество вершин
*/
void matrix_scaling(vertex *point, axis_values *scale_values);

/*!
Функция, реализующая пересчет координат точек для реализации вращения
относительно оси X.
\param *point координаты точки
\param *rot_values указатель на
количество вершин
*/
void rotation_x(vertex *point, axis_values *rot_values);

/*!
Функция, реализующая пересчет координат точек для реализации вращения
относительно оси Y.
\param *point координаты точки
\param *rot_values указатель на
количество вершин
*/
void rotation_y(vertex *point, axis_values *rot_values);

/*!
Функция, реализующая пересчет координат точек для реализации вращения
относительно оси Z. \param *point координаты точки \param *rot_values указатель
на количество вершин
*/
void rotation_z(vertex *point, axis_values *rot_values);

/*!
Функция, реализующая копирование структуры типа vertexes. Возвращает результат:
0 - успешное завершение, 1 - неудачное. \param *arr_v_1 указатель на копируемую
структуру \param *arr_v_2 указатель на структуру для записи количество вершин
*/
int vertexcopy(vertexes *arr_v_1, vertexes *arr_v_2);

#ifdef __cplusplus
}
#endif
#endif  // 3DVIEWER_H_B
